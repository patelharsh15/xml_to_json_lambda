# main.tf
#
# Contains the main resource declarations for the XML-to-JSON Lambda converter.

# --- Data Sources ---
# MUST be declared at the top of the Terraform file when consumed by multiple blocks within the file
data "aws_caller_identity" "current" {
  # Fetches the AWS account ID of the caller, used for constructing ARNs for IAM policies.
}

# --- IAM Role and Policy for Lambda Function ---
# SHOULD be declared in order of requirement (e.g., IAM resources before the Lambda that uses them)

# Lambda execution role: Allows the Lambda service to assume this role and execute the function.
resource "aws_iam_role" "lambda_exec_role" {
  name = "${var.service_name}-lambda-exec-role" # Specific name tied to the service

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "lambda.amazonaws.com"
        }
      },
    ]
  })

  tags = {
    Service = var.service_name
  }
}

# IAM policy for CloudWatch Logs: Grants permission for the Lambda to write logs.
resource "aws_iam_policy" "lambda_log_policy" {
  name        = "${var.service_name}-lambda-log-policy"
  description = "IAM policy for Lambda to write logs to CloudWatch"

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect   = "Allow"
        Action   = [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents",
        ]
        # Resource matches the serverless.yml pattern for log groups, dynamically using account ID.
        Resource = "arn:aws:logs:${var.aws_region}:${data.aws_caller_identity.current.account_id}:log-group:/aws/lambda/${var.service_name}-*:*"
      },
    ]
  })
}

# Attach the log policy to the Lambda execution role.
resource "aws_iam_role_policy_attachment" "lambda_log_policy_attach" {
  role       = aws_iam_role.lambda_exec_role.name
  policy_arn = aws_iam_policy.lambda_log_policy.arn
}


# --- Lambda Function Deployment Package Preparation ---
# These resources manage the local build process for the Lambda deployment package.

# null_resource: Triggers local commands to prepare the Lambda code and dependencies.
# This simulates the dependency packaging done by `serverless-python-requirements`.
resource "null_resource" "build_lambda_package" {
  # Triggers ensure this resource only runs if handler.py changes, recalculating the hash.
  triggers = {
    handler_file_hash = filemd5("${path.module}/handler.py")
  }

  provisioner "local-exec" {
    # The command sequence prepares the '.build/lambda_dist' directory:
    # 1. Creates the directory structure.
    # 2. Copies handler.py into it.
    # 3. Installs xmltodict and its dependencies directly into '.build/lambda_dist'.
    command = <<EOT
      mkdir -p ${path.module}/.build/lambda_dist
      cp ${path.module}/handler.py ${path.module}/.build/lambda_dist/
      pip install xmltodict -t ${path.module}/.build/lambda_dist/
    EOT
    # Ensures commands are run from the module's root directory.
    working_dir = path.module
  }
}

# archive_file: Creates the Lambda deployment package (ZIP file) from the prepared directory.
resource "archive_file" "lambda_zip" {
  type        = "zip"
  source_dir  = "${path.module}/.build/lambda_dist"
  output_path = "${path.module}/.build/${var.service_name}.zip"

  # Explicit dependency ensures zipping happens after the build process completes.
  depends_on = [null_resource.build_lambda_package]
}

# --- Lambda Function ---
# The main Lambda function definition.
resource "aws_lambda_function" "xml_to_json_converter" {
  function_name    = var.service_name                            # Uses the service_name variable for naming
  handler          = "handler.convert_xml_to_json"               # Python entry point
  runtime          = var.lambda_runtime
  memory_size      = var.lambda_memory_size
  timeout          = var.lambda_timeout
  role             = aws_iam_role.lambda_exec_role.arn           # References the ARN of the IAM role defined above
  filename         = archive_file.lambda_zip.output_path         # Path to the zipped code generated by archive_file
  source_code_hash = archive_file.lambda_zip.output_base64sha256 # Ensures Lambda detects code changes

  environment {
    variables = {
      LOG_LEVEL = var.log_level # Passes the configured log level as an environment variable
    }
  }

  tags = {
    Service = var.service_name
  }
}

# --- Lambda Function URL ---
# Creates a direct HTTP endpoint for the Lambda function.
resource "aws_lambda_function_url" "converter_url" {
  function_name      = aws_lambda_function.xml_to_json_converter.function_name
  authorization_type = "NONE" # Publicly accessible, matching 'authorizer: none'

  cors {
    allow_methods = ["POST"]         # Only POST requests are allowed (as per handler.py)
    allow_origins = ["*"]            # Allows requests from any origin (CORS)
    allow_headers = ["Content-Type"] # Specifies allowed headers for CORS
  }
}

# --- Lambda Permission for Function URL Invocation ---
# Grants public access to invoke the Lambda Function URL.
resource "aws_lambda_permission" "allow_url_invocation" {
  statement_id           = "FunctionURLInvokePermission"
  action                 = "lambda:InvokeFunctionUrl"
  function_name          = aws_lambda_function.xml_to_json_converter.function_name
  principal              = "*" # Allows invocation from any principal (public)
  function_url_auth_type = "NONE" # Required for 'NONE' authorization type Function URLs
}